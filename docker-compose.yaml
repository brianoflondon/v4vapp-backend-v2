services:
  node-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    image: node-monitor:latest
    volumes:
      # - ./.certs:/app/.certs
      - ./config:/app/config

  # mongo-pytest-local:
  #   image: mongo:8.0
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: admin
  #     MONGO_INITDB_ROOT_PASSWORD: test-admin-password
  #   # command: ["mongod", "--replSet", "rs0"]  # Enable replica set mode
  #   ports:
  #     - "127.0.0.1:37017:27017"  # Expose container's 27017 on host port 37017
  #     - "${LOCAL_TAILSCALE_IP}:37017:27017"   # Needed on home-imac
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--username", "admin", "--password", "test-admin-password", "--eval", "db.runCommand({ ping: 1 })"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped
  #   # volumes:
  #   #   - mongo_data:/data/db
  #   #   - mongo_config:/data/configdb

  redis-pytest-local:
    image: redis:latest
    ports:
      - "127.0.0.1:6379:6379"
      - "${LOCAL_TAILSCALE_IP}:6379:6379"   # Needed on home-imac
    healthcheck:  # Check if the container is healthy
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - v4vapp-backend
    restart: unless-stopped

  voltage-node-monitor:
    depends_on:
      - node-monitor
    image: node-monitor:latest
    volumes:
      - ./.certs:/app/.certs
      - ./config:/app/config
      - ./logs_docker/voltage:/app/logs
    command: ["python", "src/lnd_monitor_v2.py", "voltage"]
    restart: unless-stopped
    stop_grace_period: 20s


  umbrel-node-monitor:
    depends_on:
      - node-monitor
    image: node-monitor:latest
    volumes:
      - ./.certs:/app/.certs
      - ./config:/app/config
      - ./logs_docker/umbrel:/app/logs
    command: ["python", "src/lnd_monitor_v2.py", "umbrel"]
    restart: unless-stopped
    stop_grace_period: 20s


  hive-monitor:
    depends_on:
      - node-monitor
    image: node-monitor:latest
    volumes:
      - ./.certs:/app/.certs
      - ./config:/app/config
      - ./logs_docker/hive:/app/logs
    command: [
      "python", "src/hive_monitor_v2.py",
      "--user", "v4vapp",
      "--user", "v4vapp.tre",
      "--user", "v4vapp.dhf",
      "--user", "brianoflondon",
      "--user", "v4vapp-test",
      "--witness", "brianoflondon",
    ]
    restart: unless-stopped
    stop_grace_period: 20s
    networks:
      - v4vapp-backend

  mongo1:
    image: mongo:8.0
    container_name: mongo1
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--keyFile", "/etc/mongo-keyfile/mongo-keyfile"]
    ports:
      - "29017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: test-admin-password
    volumes:
      - mongo1_data:/data/db
      - mongo1_config:/data/configdb
      - ./config/mongo-keyfile:/etc/mongo-keyfile/mongo-keyfile:ro

  mongo2:
    image: mongo:8.0
    container_name: mongo2
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--keyFile", "/etc/mongo-keyfile/mongo-keyfile"]
    ports:
      - "29018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: test-admin-password
    volumes:
      - mongo2_data:/data/db
      - mongo2_config:/data/configdb
      - ./config/mongo-keyfile:/etc/mongo-keyfile/mongo-keyfile:ro

  mongo3:
    image: mongo:8.0
    container_name: mongo3
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--keyFile", "/etc/mongo-keyfile/mongo-keyfile"]
    ports:
      - "29019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: test-admin-password
    volumes:
      - mongo3_data:/data/db
      - mongo3_config:/data/configdb
      - ./config/mongo-keyfile:/etc/mongo-keyfile/mongo-keyfile:ro

  mongo-setup:
    image: mongo:8.0
    container_name: mongo-setup
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    entrypoint: >
      bash -c "
      sleep 5 &&
      mongosh --host mongo1 --username admin --password test-admin-password --eval '
        rs.initiate({
          _id: \"rs0\",
          members: [
            { _id: 0, host: \"mongo1:27017\" },
            { _id: 1, host: \"mongo2:27017\" },
            { _id: 2, host: \"mongo3:27017\" }
          ]
        });
      ' &&
      echo 'Replica set initialized.'"
    volumes:
      - ./config/mongo-keyfile:/etc/mongo-keyfile/mongo-keyfile:ro

volumes:
  mongo1_data:
  mongo1_config:
  mongo2_data:
  mongo2_config:
  mongo3_data:
  mongo3_config:


  # binance-monitor:
  #   depends_on:
  #     - node-monitor
  #   image: node-monitor:latest
  #   volumes:
  #     - ./config:/app/config
  #     - ./logs_docker/binance:/app/logs
  #   restart: unless-stopped
  #   stop_grace_period: 20s
  #   command: ["python", "src/binance_monitor.py"]

networks:
  repl-mongo_repl-set:
    driver: external
  v4vapp-backend:
    driver: bridge
