# Run this job on pushes to `main`, and for pull requests. If you don't specify
# `branches: [main], then this actions runs _twice_ on pull requests, which is
# annoying.
name: Pytest

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"
      - "develop"
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "LICENSE"
      - ".env*"

jobs:
  database:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:8.0
        ports:
          - "37017:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: example

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12

      # Cache the installation of Poetry itself, e.g. the next step. This prevents the workflow
      # from installing Poetry every time, which can be slow. Note the use of the Poetry version
      # number in the cache key, and the "-0" suffix: this allows you to invalidate the cache
      # manually if/when you want to upgrade Poetry, or if something goes wrong. This could be
      # mildly cleaner by using an environment variable, but I don't really care.
      - name: cache poetry install
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-1.1.12-0

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Cache your dependencies (i.e. all the stuff in your `pyproject.toml`). Note the cache
      # key: if you're using multiple Python versions, or multiple OSes, you'd need to include
      # them in the cache key. I'm not, so it can be simple and just depend on the poetry.lock.
      - name: cache deps
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies. `--no-root` means "install all dependencies but not the project
      # itself", which is what you want to avoid caching _your_ code. The `if` statement
      # ensures this only runs on a cache miss.
      - run: poetry install --no-interaction
        if: steps.cache-deps.outputs.cache-hit != 'true'

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD/src" >> $GITHUB_ENV

      # And finally run tests. I'm using pytest and all my pytest config is in my `pyproject.toml`
      # so this line is super-simple. But it could be as complex as you need.
      - name: Test with pytest
        # env:
        #   # This is a secret, so it's not printed in the logs. It's a good idea to use a secret
        #   # for your API key, but it's not strictly necessary.
        #   TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: poetry run pytest
        # Skips one QR reltated test which doesn't work on github.
