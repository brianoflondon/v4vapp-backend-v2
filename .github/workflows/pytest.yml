name: Pytest

on:
  push:
    branches:
      - main
      - develop
    tags:
      - "v*"
  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "LICENSE"
      - ".env*"

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongo1:
        image: mongo:8.0
        ports:
          - "29017:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: test-admin-password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - ./tests/config/mongo-keyfile:/etc/mongo-keyfile/mongo-keyfile:ro
          - ./tests/config/mongod.conf:/etc/mongo/mongod.conf:ro

      mongo2:
        image: mongo:8.0
        ports:
          - "29018:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: test-admin-password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - ./tests/config/mongo-keyfile:/etc/mongo-keyfile/mongo-keyfile:ro
          - ./tests/config/mongod.conf:/etc/mongo/mongod.conf:ro

      mongo3:
        image: mongo:8.0
        ports:
          - "29019:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: test-admin-password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - ./tests/config/mongo-keyfile:/etc/mongo-keyfile/mongo-keyfile:ro
          - ./tests/config/mongod.conf:/etc/mongo/mongod.conf:ro

      redis:
        image: redis:latest
        ports:
          - "6379:6379"

    steps:
      - uses: actions/checkout@v4

      - name: Wait for MongoDB to start
        run: sleep 10

      - name: Initialize MongoDB Replica Set
        run: |
          mongosh --host localhost:29017 --username admin --password test-admin-password --eval '
          rs.initiate({
            _id: "rs0",
            members: [
              { _id: 0, host: "localhost:29017" },
              { _id: 1, host: "localhost:29018" },
              { _id: 2, host: "localhost:29019" }
            ]
          });
          '

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache UV virtual environment
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: uv-venv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('uv.lock') }}

      - name: Set up UV environment and install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          uv venv --python 3.12
          uv sync --group dev

      - name: Sync UV dependencies (post-cache)
        run: |
          uv sync --group dev

      - name: Check UV version
        run: uv --version

      - name: List installed packages
        run: uv pip list

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD/src" >> $GITHUB_ENV

      - name: Test with pytest
        env:
          HIVE_ACC_TEST: ${{ secrets.HIVE_ACC_TEST }}
          HIVE_MEMO_TEST_KEY: ${{ secrets.HIVE_MEMO_TEST_KEY }}
        run: |
          uv run pytest

      - name: Print service container logs
        if: failure()
        run: |
          echo "MongoDB logs for mongo1:"
          docker logs mongo1
          echo "MongoDB logs for mongo2:"
          docker logs mongo2
          echo "MongoDB logs for mongo3:"
          docker logs mongo3
          echo "Redis logs:"
          docker logs redis