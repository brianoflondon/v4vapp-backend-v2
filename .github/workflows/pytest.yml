name: Pytest

on:
  push:
    branches:
      - main
      - develop
      - feature/single-mongo-instance-which-acts-like-a-replica-set-for-pytest-and-local-testing
    tags:
      - "v*"
  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "LICENSE"
      - ".env*"

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:8.0
        ports:
          - "37017:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: test-admin-password
        # Add command to enable replica set
        command: mongod --replSet rsPytest
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - "6379:6379"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Install UV
      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # Cache virtual environment
      - name: Cache UV virtual environment
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: uv-venv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('uv.lock') }}

      # Set up virtual environment and sync dependencies
      - name: Set up UV environment and install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          uv venv --python 3.12
          uv sync --group dev

      # Ensure UV is available and sync if cache is hit
      - name: Sync UV dependencies (post-cache)
        run: |
          uv sync --group dev

      # Check UV version
      - name: Check UV version
        run: uv --version

      # List installed packages
      - name: List installed packages
        run: uv pip list

      # Initialize MongoDB as a replica set
      - name: Initialize MongoDB Replica Set
        run: |
          # Wait for MongoDB to be ready
          until docker exec $(docker ps -q --filter "ancestor=mongo:8.0") mongosh --eval "db.runCommand({ ping: 1 })"; do
            echo "Waiting for MongoDB to be ready..."
            sleep 2
          done
          # Initialize replica set
          docker exec $(docker ps -q --filter "ancestor=mongo:8.0") mongosh -u admin -p test-admin-password --eval 'rs.initiate({
            _id: "rsPytest",
            members: [{ _id: 0, host: "localhost:27017" }]
          })'

      # Set PYTHONPATH
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD/src" >> $GITHUB_ENV

      # Run tests
      - name: Test with pytest
        env:
          HIVE_ACC_TEST: ${{ secrets.HIVE_ACC_TEST }}
          HIVE_MEMO_TEST_KEY: ${{ secrets.HIVE_MEMO_TEST_KEY }}
        run: |
          uv run pytest

      # Print service container logs only if tests fail
      - name: Print service container logs
        if: failure()
        run: |
          echo "MongoDB logs:"
          docker logs $(docker ps -q --filter "ancestor=mongo:8.0")
          echo "Redis logs:"
          docker logs $(docker ps -q --filter "ancestor=redis:latest")