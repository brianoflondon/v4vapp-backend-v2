name: Pytest

on:
  push:
    branches:
      - main
      - develop
    tags:
      - "v*"
  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "LICENSE"
      - ".env*"

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:8.0
        ports:
          - "27017:27017"
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - "6379:6379"

    steps:
      - name: Clean working directory
        run: |
          sudo rm -rf /home/runner/work/v4vapp-backend-v2/v4vapp-backend-v2/tests/config
          sudo chown -R runner:runner /home/runner/work/v4vapp-backend-v2/v4vapp-backend-v2

      - uses: actions/checkout@v4

      - name: Initialize MongoDB Replica Set
        run: |
          until mongosh --host localhost:27017 --eval 'db.runCommand({ ping: 1 })'; do
            echo "Waiting for MongoDB..."
            sleep 2
          done
          mongosh --host localhost:27017 --eval '
          rs.initiate({
            _id: "rs0",
            members: [{ _id: 0, host: "localhost:27017" }]
          });
          '

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache UV virtual environment
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: uv-venv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('uv.lock') }}

      - name: Set up UV environment and install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          uv venv --python 3.12
          uv sync --group dev

      - name: Sync UV dependencies (post-cache)
        run: |
          uv sync --group dev

      - name: Check UV version
        run: uv --version

      - name: List installed packages
        run: uv pip list

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD/src" >> $GITHUB_ENV

      - name: Test with pytest
        env:
          HIVE_ACC_TEST: ${{ secrets.HIVE_ACC_TEST }}
          HIVE_MEMO_TEST_KEY: ${{ secrets.HIVE_MEMO_TEST_KEY }}
        run: |
          uv run pytest

      - name: Print service container logs
        if: failure()
        run: |
          echo "MongoDB logs:"
          docker logs mongodb
          echo "Redis logs:"
          docker logs redis